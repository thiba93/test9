// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(uuid()) @db.Uuid
  name        String?
  description String? @default("")
  price       Float?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  cartItems   CartItem[] 
}

model Category {
  id          Int      @id @default(autoincrement())
  displayName String
  uniqueSlug  String   @unique
  displayRank Int
  products    Product[]
}

model User {
  id        String   @id @default(uuid()) @db.Uuid 
  email     String   @unique
  username  String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  cart      Cart?
}

model Cart {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @unique @db.Uuid
  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model CartItem {
  id          String   @id @default(uuid()) @db.Uuid
  cartId      String   @db.Uuid
  productId   String   @db.Uuid
  name        String
  description String
  quantity    Int      @default(1)
  price       Float
  cart        Cart     @relation(fields: [cartId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime? @updatedAt
}
